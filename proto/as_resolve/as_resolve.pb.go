// Code generated by protoc-gen-go. DO NOT EDIT.
// source: as_resolve.proto

/*
Package as_resolve is a generated protocol buffer package.

It is generated from these files:
	as_resolve.proto

It has these top-level messages:
	AsRequest
	AsResponse
*/
package as_resolve

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AsRequest struct {
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
}

func (m *AsRequest) Reset()                    { *m = AsRequest{} }
func (m *AsRequest) String() string            { return proto.CompactTextString(m) }
func (*AsRequest) ProtoMessage()               {}
func (*AsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AsRequest) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

type AsResponse struct {
	AsName string `protobuf:"bytes,1,opt,name=as_name,json=asName" json:"as_name,omitempty"`
}

func (m *AsResponse) Reset()                    { *m = AsResponse{} }
func (m *AsResponse) String() string            { return proto.CompactTextString(m) }
func (*AsResponse) ProtoMessage()               {}
func (*AsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AsResponse) GetAsName() string {
	if m != nil {
		return m.AsName
	}
	return ""
}

func init() {
	proto.RegisterType((*AsRequest)(nil), "as_resolve.as_request")
	proto.RegisterType((*AsResponse)(nil), "as_resolve.as_response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Asresolver service

type AsresolverClient interface {
	GetAsName(ctx context.Context, in *AsRequest, opts ...grpc.CallOption) (*AsResponse, error)
}

type asresolverClient struct {
	cc *grpc.ClientConn
}

func NewAsresolverClient(cc *grpc.ClientConn) AsresolverClient {
	return &asresolverClient{cc}
}

func (c *asresolverClient) GetAsName(ctx context.Context, in *AsRequest, opts ...grpc.CallOption) (*AsResponse, error) {
	out := new(AsResponse)
	err := grpc.Invoke(ctx, "/as_resolve.asresolver/get_as_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Asresolver service

type AsresolverServer interface {
	GetAsName(context.Context, *AsRequest) (*AsResponse, error)
}

func RegisterAsresolverServer(s *grpc.Server, srv AsresolverServer) {
	s.RegisterService(&_Asresolver_serviceDesc, srv)
}

func _Asresolver_GetAsName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsresolverServer).GetAsName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as_resolve.asresolver/GetAsName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsresolverServer).GetAsName(ctx, req.(*AsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Asresolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "as_resolve.asresolver",
	HandlerType: (*AsresolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_as_name",
			Handler:    _Asresolver_GetAsName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "as_resolve.proto",
}

func init() { proto.RegisterFile("as_resolve.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2c, 0x8e, 0x2f,
	0x4a, 0x2d, 0xce, 0xcf, 0x29, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x69, 0x72, 0x41, 0x78, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0xd2, 0x5c, 0x9c, 0x89, 0xc5,
	0xf1, 0x79, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x1c, 0x89,
	0xc5, 0x7e, 0x60, 0xbe, 0x92, 0x1a, 0x17, 0x37, 0x44, 0x63, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90,
	0x38, 0x17, 0x3b, 0x48, 0x6d, 0x62, 0x6e, 0x2a, 0x58, 0x25, 0x67, 0x10, 0x5b, 0x62, 0xb1, 0x5f,
	0x62, 0x6e, 0xaa, 0x91, 0x0f, 0xc8, 0x48, 0xa8, 0xf9, 0x45, 0x42, 0x76, 0x5c, 0xdc, 0xe9, 0xa9,
	0x25, 0xf1, 0x50, 0xa5, 0x42, 0x62, 0x7a, 0x48, 0xce, 0x41, 0xd8, 0x2c, 0x25, 0x8e, 0x21, 0x0e,
	0xb1, 0x26, 0x89, 0x0d, 0xec, 0x66, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x71, 0x6f,
	0xff, 0xc7, 0x00, 0x00, 0x00,
}
