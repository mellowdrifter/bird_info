// Code generated by protoc-gen-go. DO NOT EDIT.
// source: birdComm.proto

/*
Package birdComm is a generated protocol buffer package.

It is generated from these files:
	birdComm.proto

It has these top-level messages:
	Result
	Peer
	PeerGroup
	Route
	RouteGroup
*/
package birdComm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Family int32

const (
	Family_ipv4 Family = 0
	Family_ipv6 Family = 1
)

var Family_name = map[int32]string{
	0: "ipv4",
	1: "ipv6",
}
var Family_value = map[string]int32{
	"ipv4": 0,
	"ipv6": 1,
}

func (x Family) String() string {
	return proto.EnumName(Family_name, int32(x))
}
func (Family) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Result struct {
	Reply   string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Peer struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	As          uint32 `protobuf:"varint,4,opt,name=as" json:"as,omitempty"`
	Password    string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Family      Family `protobuf:"varint,6,opt,name=family,enum=birdComm.Family" json:"family,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetAs() uint32 {
	if m != nil {
		return m.As
	}
	return 0
}

func (m *Peer) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Peer) GetFamily() Family {
	if m != nil {
		return m.Family
	}
	return Family_ipv4
}

type PeerGroup struct {
	Group []*Peer `protobuf:"bytes,1,rep,name=group" json:"group,omitempty"`
}

func (m *PeerGroup) Reset()                    { *m = PeerGroup{} }
func (m *PeerGroup) String() string            { return proto.CompactTextString(m) }
func (*PeerGroup) ProtoMessage()               {}
func (*PeerGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PeerGroup) GetGroup() []*Peer {
	if m != nil {
		return m.Group
	}
	return nil
}

type Route struct {
	Prefix  string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	Mask    uint32 `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	Nexthop string `protobuf:"bytes,3,opt,name=nexthop" json:"nexthop,omitempty"`
	Family  Family `protobuf:"varint,4,opt,name=family,enum=birdComm.Family" json:"family,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Route) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Route) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *Route) GetNexthop() string {
	if m != nil {
		return m.Nexthop
	}
	return ""
}

func (m *Route) GetFamily() Family {
	if m != nil {
		return m.Family
	}
	return Family_ipv4
}

type RouteGroup struct {
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *RouteGroup) Reset()                    { *m = RouteGroup{} }
func (m *RouteGroup) String() string            { return proto.CompactTextString(m) }
func (*RouteGroup) ProtoMessage()               {}
func (*RouteGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RouteGroup) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "birdComm.result")
	proto.RegisterType((*Peer)(nil), "birdComm.peer")
	proto.RegisterType((*PeerGroup)(nil), "birdComm.peer_group")
	proto.RegisterType((*Route)(nil), "birdComm.route")
	proto.RegisterType((*RouteGroup)(nil), "birdComm.route_group")
	proto.RegisterEnum("birdComm.Family", Family_name, Family_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BirdComm service

type BirdCommClient interface {
	AddNeighbour(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Result, error)
	DeleteNeighbour(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Result, error)
	AddStatic(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Result, error)
	DeleteStatic(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Result, error)
}

type birdCommClient struct {
	cc *grpc.ClientConn
}

func NewBirdCommClient(cc *grpc.ClientConn) BirdCommClient {
	return &birdCommClient{cc}
}

func (c *birdCommClient) AddNeighbour(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/birdComm.bird_comm/add_neighbour", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdCommClient) DeleteNeighbour(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/birdComm.bird_comm/delete_neighbour", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdCommClient) AddStatic(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/birdComm.bird_comm/add_static", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdCommClient) DeleteStatic(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/birdComm.bird_comm/delete_static", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BirdComm service

type BirdCommServer interface {
	AddNeighbour(context.Context, *Peer) (*Result, error)
	DeleteNeighbour(context.Context, *Peer) (*Result, error)
	AddStatic(context.Context, *Route) (*Result, error)
	DeleteStatic(context.Context, *Route) (*Result, error)
}

func RegisterBirdCommServer(s *grpc.Server, srv BirdCommServer) {
	s.RegisterService(&_BirdComm_serviceDesc, srv)
}

func _BirdComm_AddNeighbour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdCommServer).AddNeighbour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birdComm.bird_comm/AddNeighbour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdCommServer).AddNeighbour(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdComm_DeleteNeighbour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdCommServer).DeleteNeighbour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birdComm.bird_comm/DeleteNeighbour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdCommServer).DeleteNeighbour(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdComm_AddStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdCommServer).AddStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birdComm.bird_comm/AddStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdCommServer).AddStatic(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdComm_DeleteStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdCommServer).DeleteStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/birdComm.bird_comm/DeleteStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdCommServer).DeleteStatic(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

var _BirdComm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "birdComm.bird_comm",
	HandlerType: (*BirdCommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_neighbour",
			Handler:    _BirdComm_AddNeighbour_Handler,
		},
		{
			MethodName: "delete_neighbour",
			Handler:    _BirdComm_DeleteNeighbour_Handler,
		},
		{
			MethodName: "add_static",
			Handler:    _BirdComm_AddStatic_Handler,
		},
		{
			MethodName: "delete_static",
			Handler:    _BirdComm_DeleteStatic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "birdComm.proto",
}

func init() { proto.RegisterFile("birdComm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x51, 0x8a, 0xdb, 0x30,
	0x10, 0x86, 0xab, 0xac, 0xed, 0x3a, 0x13, 0xec, 0x1a, 0x51, 0x8a, 0x59, 0xfa, 0x60, 0x4c, 0xa1,
	0xa6, 0x0f, 0x5b, 0xea, 0x2e, 0x4b, 0xdf, 0x7b, 0x03, 0x5d, 0x20, 0x28, 0x96, 0x36, 0x11, 0xb5,
	0x2d, 0x21, 0xc9, 0x4d, 0x72, 0xa7, 0x5e, 0xa8, 0xb7, 0x29, 0x52, 0xe4, 0x24, 0x84, 0x42, 0xbb,
	0x6f, 0xf3, 0xcf, 0xe8, 0xd3, 0xfc, 0xbf, 0x10, 0xe4, 0x1b, 0xa1, 0xd9, 0x77, 0x39, 0x0c, 0x0f,
	0x4a, 0x4b, 0x2b, 0x71, 0x3a, 0xeb, 0xfa, 0x1b, 0x24, 0x9a, 0x9b, 0xa9, 0xb7, 0xf8, 0x2d, 0xc4,
	0x9a, 0xab, 0xfe, 0x58, 0xa2, 0x0a, 0x35, 0x4b, 0x72, 0x12, 0xb8, 0x84, 0xd7, 0x66, 0xea, 0x3a,
	0x6e, 0x4c, 0xb9, 0xa8, 0x50, 0x93, 0x92, 0x59, 0xd6, 0xbf, 0x10, 0x44, 0x8a, 0x73, 0x8d, 0x31,
	0x44, 0x23, 0x1d, 0x78, 0xe0, 0x7c, 0x8d, 0x2b, 0x58, 0x31, 0x6e, 0x3a, 0x2d, 0x94, 0x15, 0x72,
	0xf4, 0xe8, 0x92, 0x5c, 0xb7, 0xdc, 0xc5, 0x94, 0x31, 0xed, 0x2e, 0xbe, 0xf3, 0xd3, 0x59, 0xe2,
	0x1c, 0x16, 0xd4, 0x94, 0x51, 0x85, 0x9a, 0x8c, 0x2c, 0xa8, 0xc1, 0xf7, 0x90, 0x2a, 0x6a, 0xcc,
	0x5e, 0x6a, 0x56, 0xc6, 0xfe, 0xe8, 0x59, 0xe3, 0x06, 0x92, 0x67, 0x3a, 0x88, 0xfe, 0x58, 0x26,
	0x15, 0x6a, 0xf2, 0xb6, 0x78, 0x38, 0x27, 0x3d, 0xf5, 0x49, 0x98, 0xd7, 0x2d, 0x80, 0x73, 0xbb,
	0xde, 0x6a, 0x39, 0x29, 0xfc, 0x01, 0x62, 0x5f, 0x94, 0xa8, 0xba, 0x6b, 0x56, 0x6d, 0x7e, 0xc1,
	0xdc, 0x21, 0x72, 0x1a, 0xd6, 0x7b, 0x88, 0xb5, 0x9c, 0x2c, 0xc7, 0xef, 0x20, 0x51, 0x9a, 0x3f,
	0x8b, 0x43, 0x08, 0x19, 0x94, 0x8b, 0x3e, 0x50, 0xf3, 0xc3, 0xe7, 0xcb, 0x88, 0xaf, 0x5d, 0xb0,
	0x91, 0x1f, 0xec, 0x4e, 0xaa, 0x39, 0x58, 0x90, 0x57, 0x66, 0xa3, 0x7f, 0x98, 0x7d, 0x82, 0x95,
	0x5f, 0x1c, 0xdc, 0x7e, 0x84, 0xc4, 0x4b, 0x13, 0xec, 0xbe, 0xb9, 0x80, 0xbe, 0x4f, 0xc2, 0xf8,
	0xd3, 0xfb, 0x79, 0x03, 0x4e, 0x21, 0x12, 0xea, 0xe7, 0x63, 0xf1, 0x2a, 0x54, 0x4f, 0x05, 0x6a,
	0x7f, 0x23, 0x58, 0x3a, 0x70, 0xdd, 0xc9, 0x61, 0xc0, 0x5f, 0x20, 0xa3, 0x8c, 0xad, 0x47, 0x2e,
	0xb6, 0xbb, 0x8d, 0x9c, 0x34, 0xbe, 0x79, 0x84, 0xfb, 0x2b, 0x7b, 0xe1, 0x8b, 0x3c, 0x42, 0xc1,
	0x78, 0xcf, 0x2d, 0x7f, 0x11, 0xf5, 0x19, 0xc0, 0x2d, 0x32, 0x96, 0x5a, 0xd1, 0xe1, 0x5b, 0xef,
	0x7f, 0x01, 0x5a, 0xc8, 0xc2, 0x9a, 0xff, 0x66, 0x36, 0x89, 0xff, 0xd8, 0x5f, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xf2, 0x21, 0xfd, 0x05, 0xea, 0x02, 0x00, 0x00,
}
